datasubset <- datatime[which(datatime[[input$evalselect]]%in%input$evalfilterselect),]
return(datasubset)
?environment
?sys.function
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
rownames(pointInSubset())
dim(pointInSubset())
data <- pointInSubset()
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
head(alldata)
alldata$HourofWeek <- paste(alldata$HourofDay, alldata$DayofWeek, sep="-")
head(alldata$HourofWeek)
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
library(shiny)
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
datatime[which(datatime[[input$evalselect]]%in%input$evalfilterselect),]
datasubset <- datatime[which(datatime[[input$evalselect]]%in%input$evalfilterselect),]
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace")
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
runApp("c:/users/kristan/dropbox/map/timespace", launch.browser=TRUE)
install.packages("SGP")
install.packages("devtools") # if not installed
library(devtools)
install_github("tesseradata/datadr")
install_github("tesseradata/trelliscope")
library(datadr); library(trelliscope)
library(SGP)
help("SGP")
install.packages("SGPdata")
library("SGPdata")
help("SGPdata")
?SGPdata
help("SGP")
my.grade.sequences <- list(3:4, 3:5, 3:6, 3:7, 4:8)
my.sgpData <- list(Panel_Data = sgpData)
str(my.sgpData)
my.sgpData <- list(Panel_Data = sgpData)
for (i in seq_along(my.grade.sequences)) {
my.sgpData <- studentGrowthPercentiles(panel.data=my.sgpData,
sgp.labels=list(my.year=2013, my.subject="Reading"),
use.my.knots.boundaries="DEMO",
grade.progression=my.grade.sequences[[i]])
}
my.grade.progressions <- list(3, 3:4, 3:5, 3:6, 4:7)
for (i in seq_along(my.grade.progressions)) {
my.sgpData <- studentGrowthProjections(panel.data=my.sgpData,
sgp.labels=list(my.year=2013, my.subject="Reading"),
projcuts.digits=0,
projection.unit="GRADE",
performance.level.cutscores="DEMO",
percentile.trajectory.values=c(25, 50, 75),
grade.progression=my.grade.progressions[[i]])
}
write.csv(my.sgpData$SGProjections$READING.2013,
file= "2013_Reading_SGProjections.csv", row.names=FALSE, quote=FALSE)
getwd()
head(my.sgpData$SGProjections$READING.2013)
data <- SGPDataLong
data <- data(sgpData_Long)
data <- data(sgpData_LONG)
head(data)
data(sgpData_LONG)
head(sgpData_LONG)
head(my.sgpData)
head(sgpData)
head(sgpData_LONG)
reading <- sgpData_LONG[sgpData_LONG$CONTENT_AREA=="READING"]
reading <- sgpData_LONG[sgpData_LONG$CONTENT_AREA=="READING",]
head(reading)
library(lmer)
library(lme4)
?lmer
reading[reading$ID==1005798,]
reading[reading$ID=='1005798',]
sgpData_LONG[sgpData_LONG$ID==1005798,]
sgpData_LONG[sgpData_LONG$ID==1006677
,]
table(sgpData_LONG$ID)
head(table(sgpData_LONG$ID))
head(table(sgpData$ID))
?prepareSGP
?analyzeSGP
?lmer
names(sgpData_LONG)
head(sgpData)
sgpReadingLong <- melt(sgpData, id="ID")
library(reshape2)
sgpReadingLong <- melt(sgpData, id="ID")
head(sgpReadingLong)
?reshape
sgpReadingLong <-reshape(sgpData, varying=c("GRADE", "SS"), ids="ID")
source('~/.active-rstudio-document', echo=TRUE)
sgpReadingLong <-reshape(sgpData, varying=c("GRADE", "SS"), ids="ID", direction="long")
sgpReadingLong <-reshape(sgpData, varying=c("GRADE", "SS"), timevar="Year", ids="ID", direction="long")
sgpReadingLong <-reshape(sgpData, varying=c("GRADE", "SS"), v.names="Year", ids="ID", direction="long")
summary(Indometh)
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
names(sgpReadingLong)
names(sgpData_LONG)
names(sgpData)
sgpReadingLong <-reshape(sgpData, varying=c(2:11), v.names=c("GRADE", "SS"), ids="ID", direction="long")
sgpReadingLong <-reshape(sgpData, varying=c(2:11), v.names=c("GRADE", "SS"), idvar="ID", direction="long")
head(sgpReadingLong)
sgpReadingLong <-reshape(sgpData, varying=c(2:11), v.names=c("GRADE", "SS"), idvar="ID", sep="_", direction="long")
head(sgpReadingLong)
summary(Indometh)
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
reshape(wide, direction = "long")
reshape(wide, idvar = "Subject", varying = list(2:12),
v.names = "conc", direction = "long")
sgpReadingLong <-reshape(sgpData, direction="long")
sgpReadingLong <-reshape(sgpData, varying=c(2:11), idvars="ID", direction="long")
sgpReadingLong <-reshape(sgpData, varying=c(2:11), direction="long")
sgpReadingLong <-reshape(sgpData, varying=c(2:11), sep="_", direction="long")
head(sgpReadingLong)
install.packages("xlsx")
data <- read.xlsx("c:/users/kristan/downloads/Call List Sample - 2014 Third House Friendlies (1).xlsx")
library(xlsx)
data <- read.xlsx("c:/users/kristan/downloads/Call List Sample - 2014 Third House Friendlies (1).xlsx")
data <- read.xlsx("c:/users/kristan/downloads/Call List Sample - 2014 Third House Friendlies (1).xlsx", sheetIndex=1)
head(data)
data[1,]
data[2,]
data[3,]
?odds
?odd
data <- read.xlsx("c:/users/kristan/downloads/Call List Sample - 2014 Third House Friendlies (1).xlsx", sheetIndex=1)
head(data)
data <- read.xlsx("c:/users/kristan/dropbox/convertics/donor conversion/data/HROCCallList.xlsx", sheetIndex=1)
data <- read.xlsx("c:/users/kristan/dropbox/convertics/donor conversion/data/HROCCallList.xlsx", sheetIndex=1, header=FALSE)
rownames(data)%%2
rownames(data)
is.numeric(rownames(data))
as.numeric(rownames(data))%%2
dataEvenRows <- data[as.numeric(rownames(data))%%2==0,]
head(dataEvenRows)
dataOddRows <- data[as.numeric(rownames(data))%%2==1,]
dim(dataEvenRows)
dim(dataOddRows)
data <- read.xlsx("c:/users/kristan/dropbox/convertics/donor conversion/data/HROCCallList.xlsx", sheetIndex=1, header=FALSE)
dataEvenRows <- data[as.numeric(rownames(data))%%2==0,]
dataOddRows <- data[as.numeric(rownames(data))%%2==1,]
coltoremove <- NA
for(i in 1:ncol(dataEvenRows)){
tmp <- length(dataEvenRows[,i][is.na(dataEvenRows[,i])])
if(tmp==dim(dataEvenRows)[2]){
coltoremove <- c(coltoremove, i)
}
}
tmp <- length(dataEvenRows[,i][is.na(dataEvenRows[,i])])
tmp
dim(dataEvenRows)[2]
dim(dataEvenRows)
head(dataEvenRows)
dataEvenRows[1,2]
dim(dataEvenRows)[2]
}
coltoremove <- NA
for(i in 1:ncol(dataEvenRows)){
tmp <- length(dataEvenRows[,i][is.na(dataEvenRows[,i])])
if(tmp==dim(dataEvenRows)[1]){
coltoremove <- c(coltoremove, i)
}
}
head(dataEvenRows)
coltoremove <- coltoremove[-1]
dataEvenRows2 <- dataEvenRows[,-coltoremove]
coltoremove <- NA
for(i in 1:ncol(dataOddRows)){
tmp <- length(dataOddRows[,i][is.na(dataOddRows[,i])])
if(tmp==dim(dataOddRows)[1]){
coltoremove <- c(coltoremove, i)
}
}
coltoremove <- coltoremove[-1]
dataOddRows2 <- dataOddRows[,-coltoremove]
head(dataOddRows2)
alldata <- data.frame(dataOddRows2, dataEvenRows2)
library(reshape2)
alldata$X7
alldata$X8
alldata <- alldata[,-c(7,8)]
head(alldata)
alldata$X28
alldata$X29
alldata$X30
alldata$X31
head(alldata)
datamelt <- melt(alldata, id.vars=c("X1", "X2", "X3", "X4", "X5", "X6", "X2.1"))
head(datamelt)
datamelt$X2.1
head(datamelt)
datamelt <- datamelt[,-8]
names(datamelt) <- c("Name", "Address", "Phone", "Fax", "Cell", "Email", "CityStateZip", "Contributor")
allcontrib <- read.csv("c:/users/kristan/dropbox/convertics/donor conversion/data/allcontributors.csv", stringsAsFactors=FALSE)
head(allcontrib)
library(stringdist)
test <- amatch(allcontrib$NamesNormalized, datamelt$Contributor, maxDist=3)
head(test)
?amatch
test <- amatch(datamelt$Contributor, allcontrib$NamesNormalized, maxDist=3)
head(test)
test <- amatch(datamelt$Contributor, allcontrib$NamesNormalized, method="lv")
head(test)
length(test[is.na(test)])
length(test)
test <- amatch(datamelt$Contributor, allcontrib$NamesNormalized, method="dl")
datamelt$Contributor <- toupper(datamelt$Contributor)
test <- amatch(datamelt$Contributor, allcontrib$NamesNormalized, method="lv")
length(test[is.na(test)])
test <- amatch(datamelt$Contributor, allcontrib$NamesNormalized, maxDist=5)
length(test[is.na(test)])
head(datamelt)
write.csv(datamelt, file="HROCCleaned.csv")
getwd()
write.csv(datamelt, file="HROCCleaned.csv")
install.packages("~/GitHub/alacer-trelliscope.zip", repos = NULL)
library(trelliscope)
devtools::install_github("hafen/housingData")
library(housingData)
head(housing)
byCounty <- divide(housing,
by = c("county", "state"), update = TRUE)
# look at summaries
summary(byCounty)
priceQ <- drQuantile(byCounty,
var = "medListPriceSqft")
xyplot(q ~ fval, data = priceQ,
scales = list(y = list(log = 10)))
priceQ <- drQuantile(byCounty,
var = "medListPriceSqft")
xyplot(q ~ fval, data = priceQ,
scales = list(y = list(log = 10)))
# slope of fitted line of list price for each county
lmCoef <- function(x)
coef(lm(medListPriceSqft ~ time, data = x))[2]
# apply lmCoef to each subset
byCountySlope <- addTransform(byCounty, lmCoef)
# look at a subset of transformed data
byCountySlope[[1]]
# recombine all slopes into a single data frame
countySlopes <- recombine(byCountySlope, combRbind)
plot(sort(countySlopes$val))
# make a time series trelliscope display
vdbConn("housingjunk/vdb", autoYes = TRUE)
# make and test panel function
timePanel <- function(x)
xyplot(medListPriceSqft + medSoldPriceSqft ~ time,
data = x, auto.key = TRUE, ylab = "$ / Sq. Ft.")
timePanel(byCounty[[1]][[2]])
# make and test cognostics function
priceCog <- function(x) { list(
slope = cog(lmCoef(x), desc = "list price slope"),
meanList = cogMean(x$medListPriceSqft),
listRange = cogRange(x$medListPriceSqft),
nObs = cog(sum(!is.na(x$medListPriceSqft)),
desc = "number of non-NA list prices")
)}
priceCog(byCounty[[1]][[2]])
# add display panel and cog function to vdb
makeDisplay(byCounty,
name = "list_sold_vs_time",
desc = "List and sold price over time",
panelFn = timePanel, cogFn = priceCog,
width = 400, height = 400,
lims = list(x = "same"))
# view the display
view()
remove.packages("trelliscope", lib="~/R/win-library/3.1")
install.packages("~/GitHub/alacer-trelliscope.zip", repos = NULL)
library(trelliscope)
view()
install.packages("~/GitHub/trelliscope.zip", repos = NULL)
remove.packages("trelliscope", lib="~/R/win-library/3.1")
install.packages("~/GitHub/trelliscope.zip", repos = NULL)
library(datadr); library(trelliscope)
library(SGP)
library(SGPdata)
Demonstration_SGP <- prepareSGP(sgpData_LONG)
Demonstration_SGP <- analyzeSGP(Demonstration_SGP,
sgp.config=my.custom.config,
sgp.percentiles.baseline = TRUE,
sgp.projections.baseline = TRUE,
sgp.projections.lagged.baseline = FALSE,
simulate.sgps=FALSE)
MATHEMATICS.2012_2013 = list(
sgp.content.areas=rep("MATHEMATICS", 3), # Note, must be same length as sgp.panel.years
sgp.panel.years=c('2010_2011', '2011_2012', '2012_2013'),
sgp.grade.sequences=list(4:6)),
READING.2012_2013 = list(
sgp.content.areas=rep("READING", 3),
sgp.panel.years=c('2010_2011', '2011_2012', '2012_2013'),
sgp.grade.sequences=list(4:6)))
my.custom.config <- list(
MATHEMATICS.2012_2013 = list(
sgp.content.areas=rep("MATHEMATICS", 3), # Note, must be same length as sgp.panel.years
sgp.panel.years=c('2010_2011', '2011_2012', '2012_2013'),
sgp.grade.sequences=list(4:6)
),
READING.2012_2013 = list(
sgp.content.areas=rep("READING", 3),
sgp.panel.years=c('2010_2011', '2011_2012', '2012_2013'),
sgp.grade.sequences=list(4:6)
)
)
Demonstration_SGP <- prepareSGP(sgpData_LONG)
Demonstration_SGP <- analyzeSGP(Demonstration_SGP,
sgp.config=my.custom.config,
sgp.percentiles.baseline = TRUE,
sgp.projections.baseline = TRUE,
sgp.projections.lagged.baseline = FALSE,
simulate.sgps=FALSE)
resultsReadingProjection <- Demonstration_SGP@SGP$SGProjections$READING.2012_2013
mmadata <- sgpData_LONG[sgpData_LONG$YEAR %in% c('2010_2011', '2011_2012', '2012_2013'),]
mmadata <- mmadata[mmadata$GRADE %in% c(4,5,6),]
mmadata$IDFac <- factor(mmadata$ID)
mmareadingdata <- mmadata[mmadata$CONTENT_AREA=="READING",]
test <- names(table(mmareadingdata$ID)[table(mmareadingdata$ID)>3])
mmareadingall <- mmareadingdata[mmareadingdata$ID %in% test]
library(reshape2)
mmadatamelt <- melt(mmareadingdata[,c("ID", "GRADE", "SCALE_SCORE")], id=c("ID", "GRADE"))
mmadatacast <- dcast(mmadatamelt, ID ~ GRADE + variable, sum)
covars <- melt(mmareadingdata[,c("ID", "YEAR", "GENDER", "ETHNICITY",
"FREE_REDUCED_LUNCH_STATUS", "ELL_STATUS", "IEP_STATUS", "SCHOOL_NUMBER",
"DISTRICT_NUMBER")], id=c("ID", "GENDER", "ETHNICITY",
"FREE_REDUCED_LUNCH_STATUS", "ELL_STATUS", "IEP_STATUS", "SCHOOL_NUMBER",
"DISTRICT_NUMBER"))
covarscast <- dcast(covars, ID + GENDER + ETHNICITY + FREE_REDUCED_LUNCH_STATUS +
ELL_STATUS + IEP_STATUS + SCHOOL_NUMBER + DISTRICT_NUMBER ~ variable)
covars <- melt(mmareadingdata[,c("ID", "YEAR", "GENDER", "ETHNICITY",
"FREE_REDUCED_LUNCH_STATUS", "ELL_STATUS", "IEP_STATUS", "SCHOOL_NUMBER",
"DISTRICT_NUMBER")], id=c("ID", "GENDER", "ETHNICITY",
"FREE_REDUCED_LUNCH_STATUS", "ELL_STATUS", "IEP_STATUS", "SCHOOL_NUMBER",
"DISTRICT_NUMBER"))
covarscast <- dcast(covars, ID + GENDER + ETHNICITY + FREE_REDUCED_LUNCH_STATUS +
ELL_STATUS + IEP_STATUS + SCHOOL_NUMBER + DISTRICT_NUMBER ~ variable)
head(covarscast)
head(covars)
resultsReading <- merge(resultsReadingProjection, mmadatacast, by="ID", all.x=TRUE)
resultsReadingcovars <- merge(resultsReading, covarscast[,-c(ncol(covarscast))], by="ID", all.x=TRUE)
head(resultsReadingcovars)
head(covarscast)
resultsLong <- melt(resultsReadingcovars, id=c("ID", "GENDER", "ETHNICITY",
"FREE_REDUCED_LUNCH_STATUS", "ELL_STATUS", "IEP_STATUS", "SCHOOL_NUMBER",
"DISTRICT_NUMBER"))
resultsLong$Time <- NA
resultsLong$Time[resultsLong$variable=='4_SCALE_SCORE'] <- 4
resultsLong$Time[resultsLong$variable=='5_SCALE_SCORE'] <- 5
resultsLong$Time[resultsLong$variable=='P1_PROJ_YEAR_1_CURRENT'] <- 6
resultsLong$Time[resultsLong$variable=='P20_PROJ_YEAR_1_CURRENT'] <- 6
resultsLong$Time[resultsLong$variable=='P40_PROJ_YEAR_1_CURRENT'] <- 6
resultsLong$Time[resultsLong$variable=='P61_PROJ_YEAR_1_CURRENT'] <- 6
resultsLong$Time[resultsLong$variable=='P81_PROJ_YEAR_1_CURRENT'] <- 6
resultsLong$Time[resultsLong$variable=='P99_PROJ_YEAR_1_CURRENT'] <- 6
resultsLong61 <- resultsLong[resultsLong$variable %in% c("4_SCALE_SCORE",
"5_SCALE_SCORE", "P61_PROJ_YEAR_1_CURRENT"),]
byDistrict <- divide(resultsLong61,
by = c("DISTRICT_NUMBER", "GENDER", ""))
head(resultsLong61)
resultsLong61noZero <- resultsLong61[resultsLong61$value!=0,]
resultsLong61noZero <- resultsLong61noZero[!is.na(resultsLong61noZero$ID),]
results <- resultsLong61noZero[order(resultsLong61noZero$ID, resultsLong61noZero$Time),]
bySchoolGenderEthnicty <- divide(results,
by = c("SCHOOL_NUMBER", "GENDER", "ETHNICITY", "IEP_STATUS", "FREE_REDUCED_LUNCH_STATUS"))
vdbConn("SchoolData/vdb", autoYes = TRUE)
timePanel <- function(x)
xyplot(value ~ Time, group=ID,
data = x, auto.key = FALSE, type="l",
ylab="Score", xlab="Year in School")
timePanel(bySchoolGenderEthnicty[[1]][[2]])
scoreCog <- function(x) { list(
meanScore = cogMean(x$value),
scoreRange = cogRange(x$value),
nObs = cog(sum(!is.na(x$value)),
desc = "number of students")
)}
scoreCog(bySchoolGenderEthnicty[[1]][[2]])
makeDisplay(bySchoolGenderEthnicty,
name = "Student_Achievement_Demographicsv3",
desc = "Student Scores Grades 4-5 Predicting Grade 6",
panelFn = timePanel, cogFn = scoreCog,
width = 400, height = 400,
lims = list(x = "same"))
view()
setwd("c:/users/kristan/documents")
setwd("githbub/trelliscope/data")
setwd("github/trelliscope/data")
# make a time series trelliscope display
vdbConn("SchoolData/vdb", autoYes = TRUE)
# make and test panel function
timePanel <- function(x)
xyplot(value ~ Time, group=ID,
data = x, auto.key = FALSE, type="l",
ylab="Score", xlab="Year in School")
timePanel(bySchoolGenderEthnicty[[1]][[2]])
# make and test cognostics function
scoreCog <- function(x) { list(
meanScore = cogMean(x$value),
scoreRange = cogRange(x$value),
nObs = cog(sum(!is.na(x$value)),
desc = "number of students")
)}
scoreCog(bySchoolGenderEthnicty[[1]][[2]])
# add display panel and cog function to vdb
makeDisplay(bySchoolGenderEthnicty,
name = "Student_Achievement_Demographicsv3",
desc = "Student Scores Grades 4-5 Predicting Grade 6",
panelFn = timePanel, cogFn = scoreCog,
width = 400, height = 400,
lims = list(x = "same")
)
# view the display (using trelliscope)
#view()
#use Alacer-Branded Trelliscope
library(shiny)
runApp("../inst/TrelliscopeViewerAlacer")
